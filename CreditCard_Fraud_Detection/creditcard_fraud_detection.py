# -*- coding: utf-8 -*-
"""Creditcard_fraud_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ajb1yhtvq3MTb9KEzbnHRFALlxV8MVu6

AUTHOR: Adedolapo Sharon Olatunji
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
import sklearn.preprocessing as sp
from sklearn.metrics import accuracy_score

# %matplotlib inline

"""LOAD CREDIT CARD DATASET"""

data = pd.read_csv('creditcard.csv')
data

data.shape

data.head(10)

# check for any null values
data.isnull().values.any()

data.isnull().sum()

data.dtypes

data = data.dropna()

data.isna().sum()

# drop duplicates
data = data.drop_duplicates()
data

data=data.dropna(axis=1)
data

"""CHECK TARGET VARIABLES"""

fraud_cases=len(data[data['Class']==1])
fraud_cases

authentic_cases=len(data[data['Class']==0])
authentic_cases

"""DATA ANALYSIS"""

sb.countplot(x=data.Class ,hue=data.Class)

plt.figure(figsize=(20,12))
sb.heatmap(data.corr(),annot=True,linewidth =2)
plt.tight_layout()

# Histogram of each feature
import itertools

col = data.columns[:8]
plt.subplots(figsize = (20, 15))
length = len(col)

for i, j in itertools.zip_longest(col, range(length)):
    plt.subplot((length//2), 3, j + 1)
    plt.subplots_adjust(wspace = 0.1,hspace = 0.5)
    data[i].hist(bins = 20)
    plt.title(i)
plt.show()

# Scatter plot matrix
import pandas as pd
from pandas.plotting import scatter_matrix

scatter_matrix(data, figsize=(20, 20))

"""FEATURES AND LABELS"""

X = data.drop('Class', axis=1)
y = data.Class

scalar = StandardScaler()
X=scalar.fit_transform(X)

"""DATA SPLITTING"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

"""MODEL (LOGISTIC REGRESSION)"""

from sklearn.linear_model import LogisticRegression
model_lm= LogisticRegression()

model_lm.fit(X_train,y_train)
pred_y=model_lm.predict(X_test)

import sklearn.model_selection as ms
from sklearn.metrics import confusion_matrix
y_train_pred = ms.cross_val_predict(model_lm, X_train, y_train)
conf_mx = confusion_matrix(y_train, y_train_pred)
conf_mx

"""MODEL EVALUATION"""

report=classification_report(y_test,pred_y)
print("Classification Report:")
print(report)

"""MODEL2 (RF CLASSIFIER)"""

from sklearn.ensemble import RandomForestClassifier
model_rf= RandomForestClassifier()

model_rf.fit(X_train,y_train)
pred_y=model_rf.predict(X_test)

import sklearn.model_selection as ms
from sklearn.metrics import confusion_matrix
y_train_pred = ms.cross_val_predict(model_rf, X_train, y_train)
conf_mx = confusion_matrix(y_train, y_train_pred)
conf_mx

"""MODEL EVALUATION"""

report=classification_report(y_test,pred_y)
print("Classification Report:")
print(report)