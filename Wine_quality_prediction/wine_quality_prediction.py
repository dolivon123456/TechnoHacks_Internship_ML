# -*- coding: utf-8 -*-
"""wine_quality_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1txmHvmlX62DutHKPivc3uRyz5WHywXjM

AUTHOR: Adedolapo Sharon Olatunji
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression

# %matplotlib inline

"""LOAD WINE DATASET"""

data = pd.read_csv('winequality-red.csv')
data

data.shape

data.head(10)

data.info()

data.describe().T

# check for any null values
data.isnull().values.any()

data.isnull().sum()

data.dtypes

"""CHECK TARGET VARIABLES"""

data['quality'].value_counts()

data['alcohol'].value_counts()

"""DATA ANALYSIS"""

plt.figure(figsize=(20,12))
sb.heatmap(data.corr(),annot=True,linewidth =2)
plt.tight_layout()

data.hist(bins=20, figsize=(10, 10))
plt.show()

#bar plot
plt.bar(data['quality'], data['alcohol'])
plt.xlabel('quality')
plt.ylabel('alcohol')
plt.show()

plt.figure(figsize=(12, 12))
sb.heatmap(data.corr() > 0.7, annot=True, cbar=False)
plt.show()

# Scatter plot matrix
import pandas as pd
from pandas.plotting import scatter_matrix

scatter_matrix(data, figsize=(20, 20))

"""DATA CLEANING"""

data = data.drop('total sulfur dioxide', axis=1)

data

data['best quality'] = [1 if x > 5 else 0 for x in data.quality]
data.replace({'white': 1, 'red': 0}, inplace=True)

"""DATASET SPLITTING"""

features = data.drop(['quality', 'best quality'], axis=1)
target = data['best quality']

xtrain, xtest, ytrain, ytest = train_test_split(
    features, target, test_size=0.2, random_state=40)

xtrain.shape, xtest.shape

norm = MinMaxScaler()
xtrain = norm.fit_transform(xtrain)
xtest = norm.transform(xtest)

"""MODEL"""

models = [LogisticRegression(), XGBClassifier(), SVC(kernel='rbf')]

for i in range(3):
    models[i].fit(xtrain, ytrain)

    print(f'{models[i]} : ')
    print('Training Accuracy : {:.2%}'.format(metrics.roc_auc_score(ytrain, models[i].predict(xtrain))))
    print('Validation Accuracy : {:.2%}'.format(metrics.roc_auc_score(ytest, models[i].predict(xtest))))
    print()
    print()

metrics.classification_report(ytest, models[1].predict(xtest))